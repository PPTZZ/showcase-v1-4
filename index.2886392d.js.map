{"mappings":"uDAAAA,EAAiBC,KAAKC,MAAM,6tGCG5B,MAAMC,EAAUC,SAASC,cAAc,oBAajCC,EAAWF,SAASC,cAAc,eACtCE,EAAQH,SAASC,cAAc,iBAC/BG,EAAaJ,SAASC,cAAc,iBACpCI,EAAYL,SAASC,cAAc,gBACnCK,EAAYN,SAASC,cAAc,gBAE/BM,EAAeC,IACnB,MAAMC,EAASC,EAAAd,GAAKe,QAAOC,GAAQA,EAAKC,SAAWL,MAC5CM,KAAEA,EAAIC,MAAEA,EAAKF,OAAEA,EAAMG,KAAEA,EAAIC,KAAEA,IAAUR,EAC9CP,EAASgB,IAAML,EACfV,EAAMgB,YAAcL,EACpBV,EAAWe,YAAcJ,EACzBV,EAAUe,KAAOH,EACjBZ,EAAUc,YAAcL,EACxBR,EAAUa,YAAcH,CAAI,EC5BxBK,EAAQrB,SAASC,cAAc,qBACnCqB,EAAWtB,SAASC,cAAc,qBDGlCS,EAAAd,GAAK2B,SAAQ,EAACV,OAAEA,MACd,MAAMW,EAAO,yDACmBX,wEAGhCd,EAAQ0B,mBAAmB,YAAaD,EAAK,ICJjDzB,EAAQ2B,iBAAiB,SAASC,IAChC,GAA0B,QAAtBA,EAAEC,OAAOC,SACX,OAEFC,QAAQC,IAAIJ,EAAEC,OAAOC,UACrB,MAAMrB,EAAcmB,EAAEC,OAAOV,IAC7BG,EAAMW,UAAUC,OAAO,UACvB1B,EAAaC,EAAY,IAG3Bc,EAASI,iBAAiB,SAAS,KACjCL,EAAMW,UAAUC,OAAO,SAAS","sources":["assets/data/data.json","src/scripts/data.js","src/index.js"],"sourcesContent":["[\n    {\n      \"name\": \"Face Detector\",\n      \"descr\": \"A small app, built  using React.js for the client and Express for the server, that takes an image from a link and via API communicates with the Clarifai AI model to recognize faces. Using the free version, it only returns the position of the first face it detects in a picture with multiple faces.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/face-detector.png?raw=true\",\n      \"tech\": \"React, Express, Clarifai API\",\n      \"link\": \"https://resilient-twilight-3a61ff.netlify.app/\",\n      \"id\": \"1\"\n    },\n    {\n      \"name\": \"Image Search\",\n      \"descr\": \"Using only the basic building blocks of the internet HTML, CSS and JavaScript, Iâ€™ve created a search prompt that returns an interactive image gallery of the search parameter, with infinite scrolling as pagination.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/image-search.png?raw=true\",\n      \"tech\": \"HTML, CSS, JavaScript\",\n      \"link\": \"https://pptzz.github.io/goit-js-hw-11/\",\n      \"id\": \"2\"\n    },\n    {\n      \"name\": \"WebStudio\",\n      \"descr\": \"Following a specific design in Figma and using only basic HTML and CSS to create, from  scratch, a responsive mock presentation website for a web development firm.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/web-studio.png?raw=true\",\n      \"tech\": \"HTML, CSS\",\n      \"link\": \"https://pptzz.github.io/goit-markup-hw-07/\",\n      \"id\": \"3\"\n    },\n    {\n      \"name\": \"RoboFriends\",\n      \"descr\": \"Using React, I've created a quick contacts web app that uses a mock API to fetch contact information from a server and display it under each Robofriend character.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/robofriends.png?raw=true\",\n      \"tech\": \"React, CSS\",\n      \"link\": \"https://deluxe-sunshine-17fe3f.netlify.app/\",\n      \"id\": \"4\"\n    },\n    {\n      \"name\": \"Simon Says\",\n      \"descr\": \"This is a basic game of Simon Says in which I used HTML and CSS to create 4 buttons with a basic layout, and then implemented the game loop using JavaScript, to generate a random pattern and check if the user replicates the pattern correctly.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/simon-says.png?raw=true\",\n      \"tech\": \"HTML, CSS, JavaScript\",\n      \"link\": \"https://pptzz.github.io/simon-says/\",\n      \"id\": \"5\"\n    },\n    {\n      \"name\": \"Drum Kit\",\n      \"descr\": \"It's a drum kit I made when I was learning how to add sound and make responsive buttons that reacted to the user pressing specific keys on the keyboard or clicking on different buttons.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/drum-kit.png?raw=true\",\n      \"tech\": \"HTML, CSS, JavaScript\",\n      \"link\": \"https://vermillion-vacherin-2ad7e7.netlify.app/\",\n      \"id\": \"6\"\n    },\n    {\n      \"name\": \"Background Generator\",\n      \"descr\": \"While exercising DOM manipulation with JS, I've created a background generator that creates a gradient from random colors and outputs the CSS syntax needed for your project.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/gradient-generator.png?raw=true\",\n      \"tech\": \"HTML, CSS, JavaScript\",\n      \"link\": \"https://quiet-zabaione-ad3e2b.netlify.app/\",\n      \"id\": \"7\"\n    },\n    {\n      \"name\": \"ISS Location\",\n      \"descr\": \"An app that I built to automatically tap into a public API and retrieve the live location of the ISS every 3 seconds using onli React and CSS.\",\n      \"imgUrl\": \"https://github.com/PPTZZ/portofolio-images/blob/main/iss-location.png?raw=true\",\n      \"tech\": \" React, CSS\",\n      \"link\": \"https://dazzling-cassata-2828c8.netlify.app/\",\n      \"id\": \"8\"\n    }\n  ]","import data from '../../assets/data/data.json';\n\n// Populate Gallery\nconst gallery = document.querySelector('#display__canvas');\n\nconst createCards = () => {\n  data.forEach(({ imgUrl }) => {\n    const card = `<div class=\"card\">\n                        <img src=\"${imgUrl}\" class=\"display__img\" loading=\"lazy\">\n                      </div>`;\n\n    gallery.insertAdjacentHTML('beforeend', card);\n  });\n};\n\n// display correct data in modal\nconst modalImg = document.querySelector('.modal__img'),\n  title = document.querySelector('.modal__title'),\n  modalDescr = document.querySelector('.modal__descr'),\n  modalLink = document.querySelector('.modal__link'),\n  modalTech = document.querySelector('.modal__tech');\n\nconst modalDisplay = selectedImg => {\n  const myItem = data.filter(item => item.imgUrl === selectedImg);\n  const [{ name, descr, imgUrl, tech, link }] = myItem;\n  modalImg.src = imgUrl;\n  title.textContent = name;\n  modalDescr.textContent = descr;\n  modalLink.href = link;\n  modalLink.textContent = name;\n  modalTech.textContent = tech;\n};\n\nexport { data, gallery, createCards, modalDisplay };\n","import { createCards, modalDisplay, gallery, data } from './scripts/data';\n\nconst modal = document.querySelector('.modal__container'),\n  closeBtn = document.querySelector('.modal__close-btn');\n\ncreateCards();\n\ngallery.addEventListener('click', e => {\n  if (e.target.nodeName !== 'IMG') {\n    return;\n  }\n  console.log(e.target.nodeName);\n  const selectedImg = e.target.src;\n  modal.classList.toggle('hidden');\n  modalDisplay(selectedImg);\n});\n\ncloseBtn.addEventListener('click', () => {\n  modal.classList.toggle('hidden');\n});\n"],"names":["$83e8200a304f6f67$exports","JSON","parse","$731392dce9712b6d$export$b21c1b4271bdbe93","document","querySelector","$731392dce9712b6d$var$modalImg","$731392dce9712b6d$var$title","$731392dce9712b6d$var$modalDescr","$731392dce9712b6d$var$modalLink","$731392dce9712b6d$var$modalTech","$731392dce9712b6d$export$e0389b2bb2ef277f","selectedImg","myItem","$parcel$interopDefault","filter","item","imgUrl","name","descr","tech","link","src","textContent","href","$1f0dc3b9307be026$var$modal","$1f0dc3b9307be026$var$closeBtn","forEach","card","insertAdjacentHTML","addEventListener","e","target","nodeName","console","log","classList","toggle"],"version":3,"file":"index.2886392d.js.map"}